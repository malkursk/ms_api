from sqlalchemy.orm import Session
from faker import Faker
import random
from datetime import datetime, timedelta, date
from database import SessionLocal
import models

fake = Faker('ru_RU')

# üìå –°–û–ì–õ–ê–°–û–í–ê–ù–ù–´–ï –§–ò–û –ü–û –ü–û–õ–£
male_first_names = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ê–ª–µ–∫—Å–µ–π', '–ê–Ω–¥—Ä–µ–π', '–ê–Ω—Ç–æ–Ω', '–ê—Ä—Ç–µ–º', '–ë–æ—Ä–∏—Å', '–í–∞–¥–∏–º', '–í–∞–ª–µ–Ω—Ç–∏–Ω', 
    '–í–∞–ª–µ—Ä–∏–π', '–í–∞—Å–∏–ª–∏–π', '–í–∏–∫—Ç–æ—Ä', '–í–∏—Ç–∞–ª–∏–π', '–í–ª–∞–¥–∏–º–∏—Ä', '–í–ª–∞–¥–∏—Å–ª–∞–≤', '–ì–µ–Ω–Ω–∞–¥–∏–π', 
    '–ì–µ–æ—Ä–≥–∏–π', '–ì—Ä–∏–≥–æ—Ä–∏–π', '–î–∞–Ω–∏–∏–ª', '–î–µ–Ω–∏—Å', '–î–º–∏—Ç—Ä–∏–π', '–ï–≤–≥–µ–Ω–∏–π', '–ï–≥–æ—Ä', '–ò–≤–∞–Ω', 
    '–ò–≥–æ—Ä—å', '–ò–ª—å—è', '–ö–∏—Ä–∏–ª–ª', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω', '–õ–µ–≤', '–õ–µ–æ–Ω–∏–¥', '–ú–∞–∫—Å–∏–º', '–ú–∞—Ä–∫', 
    '–ú–∞—Ç–≤–µ–π', '–ú–∏—Ö–∞–∏–ª', '–ù–∏–∫–∏—Ç–∞', '–ù–∏–∫–æ–ª–∞–π', '–û–ª–µ–≥', '–ü–∞–≤–µ–ª', '–ü–µ—Ç—Ä', '–†–æ–º–∞–Ω', 
    '–†—É—Å–ª–∞–Ω', '–°–µ—Ä–≥–µ–π', '–°—Ç–∞–Ω–∏—Å–ª–∞–≤', '–°—Ç–µ–ø–∞–Ω', '–¢–∏–º–æ—Ñ–µ–π', '–§–µ–¥–æ—Ä', '–Æ—Ä–∏–π', '–Ø—Ä–æ—Å–ª–∞–≤'
]

female_first_names = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞', '–ê–ª–µ–Ω–∞', '–ê–ª–∏–Ω–∞', '–ê–ª–∏—Å–∞', '–ê–ª–ª–∞', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è', '–ê–Ω–≥–µ–ª–∏–Ω–∞', '–ê–Ω–Ω–∞', 
    '–í–∞–ª–µ–Ω—Ç–∏–Ω–∞', '–í–∞–ª–µ—Ä–∏—è', '–í–∞—Ä–≤–∞—Ä–∞', '–í–µ—Ä–∞', '–í–µ—Ä–æ–Ω–∏–∫–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ì–∞–ª–∏–Ω–∞', 
    '–î–∞—Ä—å—è', '–î–∏–∞–Ω–∞', '–ï–≤–∞', '–ï–≤–≥–µ–Ω–∏—è', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–ï–ª–µ–Ω–∞', '–ï–ª–∏–∑–∞–≤–µ—Ç–∞', '–ñ–∞–Ω–Ω–∞', 
    '–ó–æ—è', '–ò—Ä–∏–Ω–∞', '–ö–∏—Ä–∞', '–ö—Å–µ–Ω–∏—è', '–õ–∞—Ä–∏—Å–∞', '–õ–∏–¥–∏—è', '–õ—é–±–æ–≤—å', '–õ—é–¥–º–∏–ª–∞', 
    '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ú–∞—Ä–∏–Ω–∞', '–ú–∞—Ä–∏—è', '–ù–∞–¥–µ–∂–¥–∞', '–ù–∞—Ç–∞–ª—å—è', '–ù–∏–Ω–∞', '–û–∫—Å–∞–Ω–∞', '–û–ª–µ—Å—è', 
    '–û–ª—å–≥–∞', '–ü–æ–ª–∏–Ω–∞', '–°–≤–µ—Ç–ª–∞–Ω–∞', '–°–æ—Ñ–∏—è', '–¢–∞–º–∞—Ä–∞', '–¢–∞—Ç—å—è–Ω–∞', '–£–ª—å—è–Ω–∞', '–Æ–ª–∏—è', '–Ø–Ω–∞'
]

male_last_names = [
    '–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤', '–°–∏–¥–æ—Ä–æ–≤', '–°–º–∏—Ä–Ω–æ–≤', '–ö—É–∑–Ω–µ—Ü–æ–≤', '–ü–æ–ø–æ–≤', '–õ–µ–±–µ–¥–µ–≤', '–ö–æ–∑–ª–æ–≤', 
    '–ù–æ–≤–∏–∫–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤', '–í–æ–ª–∫–æ–≤', '–°–æ–ª–æ–≤—å–µ–≤', '–í–∞—Å–∏–ª—å–µ–≤', '–ó–∞–π—Ü–µ–≤', '–ü–∞–≤–ª–æ–≤', 
    '–°–µ–º–µ–Ω–æ–≤', '–ì–æ–ª—É–±–µ–≤', '–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤', '–ë–æ–≥–¥–∞–Ω–æ–≤', '–í–æ—Ä–æ–±—å–µ–≤', '–§–µ–¥–æ—Ä–æ–≤', '–ú–∏—Ö–∞–π–ª–æ–≤', 
    '–ë–µ–ª—è–µ–≤', '–¢–∞—Ä–∞—Å–æ–≤', '–ë–µ–ª–æ–≤', '–ö–æ–º–∞—Ä–æ–≤', '–û—Ä–ª–æ–≤', '–ö–∏—Å–µ–ª–µ–≤', '–ú–∞–∫–∞—Ä–æ–≤', '–ê–Ω–¥—Ä–µ–µ–≤'
]

female_last_names = [
    '–ò–≤–∞–Ω–æ–≤–∞', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–∏–¥–æ—Ä–æ–≤–∞', '–°–º–∏—Ä–Ω–æ–≤–∞', '–ö—É–∑–Ω–µ—Ü–æ–≤–∞', '–ü–æ–ø–æ–≤–∞', '–õ–µ–±–µ–¥–µ–≤–∞', 
    '–ö–æ–∑–ª–æ–≤–∞', '–ù–æ–≤–∏–∫–æ–≤–∞', '–ú–æ—Ä–æ–∑–æ–≤–∞', '–í–æ–ª–∫–æ–≤–∞', '–°–æ–ª–æ–≤—å–µ–≤–∞', '–í–∞—Å–∏–ª—å–µ–≤–∞', '–ó–∞–π—Ü–µ–≤–∞', 
    '–ü–∞–≤–ª–æ–≤–∞', '–°–µ–º–µ–Ω–æ–≤–∞', '–ì–æ–ª—É–±–µ–≤–∞', '–í–∏–Ω–æ–≥—Ä–∞–¥–æ–≤–∞', '–ë–æ–≥–¥–∞–Ω–æ–≤–∞', '–í–æ—Ä–æ–±—å–µ–≤–∞', 
    '–§–µ–¥–æ—Ä–æ–≤–∞', '–ú–∏—Ö–∞–π–ª–æ–≤–∞', '–ë–µ–ª—è–µ–≤–∞', '–¢–∞—Ä–∞—Å–æ–≤–∞', '–ë–µ–ª–æ–≤–∞', '–ö–æ–º–∞—Ä–æ–≤–∞', '–û—Ä–ª–æ–≤–∞', 
    '–ö–∏—Å–µ–ª–µ–≤–∞', '–ú–∞–∫–∞—Ä–æ–≤–∞', '–ê–Ω–¥—Ä–µ–µ–≤–∞'
]

male_middle_names = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á', '–ê–ª–µ–∫—Å–µ–µ–≤–∏—á', '–ê–Ω–¥—Ä–µ–µ–≤–∏—á', '–ê–Ω—Ç–æ–Ω–æ–≤–∏—á', '–ê—Ä—Ç–µ–º–æ–≤–∏—á', '–ë–æ—Ä–∏—Å–æ–≤–∏—á',
    '–í–∞–¥–∏–º–æ–≤–∏—á', '–í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏—á', '–í–∞–ª–µ—Ä—å–µ–≤–∏—á', '–í–∞—Å–∏–ª—å–µ–≤–∏—á', '–í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', '–í–∏—Ç–∞–ª—å–µ–≤–∏—á',
    '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', '–í–ª–∞–¥–∏—Å–ª–∞–≤–æ–≤–∏—á', '–ì–µ–Ω–Ω–∞–¥—å–µ–≤–∏—á', '–ì–µ–æ—Ä–≥–∏–µ–≤–∏—á', '–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∏—á',
    '–î–∞–Ω–∏–ª–æ–≤–∏—á', '–î–µ–Ω–∏—Å–æ–≤–∏—á', '–î–º–∏—Ç—Ä–∏–µ–≤–∏—á', '–ï–≤–≥–µ–Ω—å–µ–≤–∏—á', '–ï–≥–æ—Ä–æ–≤–∏—á', '–ò–≤–∞–Ω–æ–≤–∏—á',
    '–ò–≥–æ—Ä–µ–≤–∏—á', '–ò–ª—å–∏—á', '–ö–∏—Ä–∏–ª–ª–æ–≤–∏—á', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á', '–õ—å–≤–æ–≤–∏—á', '–õ–µ–æ–Ω–∏–¥–æ–≤–∏—á',
    '–ú–∞–∫—Å–∏–º–æ–≤–∏—á', '–ú–∞—Ä–∫–æ–≤–∏—á', '–ú–∞—Ç–≤–µ–µ–≤–∏—á', '–ú–∏—Ö–∞–π–ª–æ–≤–∏—á', '–ù–∏–∫–∏—Ç–∏—á', '–ù–∏–∫–æ–ª–∞–µ–≤–∏—á',
    '–û–ª–µ–≥–æ–≤–∏—á', '–ü–∞–≤–ª–æ–≤–∏—á', '–ü–µ—Ç—Ä–æ–≤–∏—á', '–†–æ–º–∞–Ω–æ–≤–∏—á', '–†—É—Å–ª–∞–Ω–æ–≤–∏—á', '–°–µ—Ä–≥–µ–µ–≤–∏—á',
    '–°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–∏—á', '–°—Ç–µ–ø–∞–Ω–æ–≤–∏—á', '–¢–∏–º–æ—Ñ–µ–µ–≤–∏—á', '–§–µ–¥–æ—Ä–æ–≤–∏—á', '–Æ—Ä—å–µ–≤–∏—á', '–Ø—Ä–æ—Å–ª–∞–≤–æ–≤–∏—á'
]

female_middle_names = [
    '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞', '–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞', '–ê–Ω–¥—Ä–µ–µ–≤–Ω–∞', '–ê–Ω—Ç–æ–Ω–æ–≤–Ω–∞', '–ê—Ä—Ç–µ–º–æ–≤–Ω–∞', '–ë–æ—Ä–∏—Å–æ–≤–Ω–∞',
    '–í–∞–¥–∏–º–æ–≤–Ω–∞', '–í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–Ω–∞', '–í–∞–ª–µ—Ä—å–µ–≤–Ω–∞', '–í–∞—Å–∏–ª—å–µ–≤–Ω–∞', '–í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞', '–í–∏—Ç–∞–ª—å–µ–≤–Ω–∞',
    '–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞', '–í–ª–∞–¥–∏—Å–ª–∞–≤–æ–≤–Ω–∞', '–ì–µ–Ω–Ω–∞–¥—å–µ–≤–Ω–∞', '–ì–µ–æ—Ä–≥–∏–µ–≤–Ω–∞', '–ì—Ä–∏–≥–æ—Ä—å–µ–≤–Ω–∞',
    '–î–∞–Ω–∏–ª–æ–≤–Ω–∞', '–î–µ–Ω–∏—Å–æ–≤–Ω–∞', '–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞', '–ï–≤–≥–µ–Ω—å–µ–≤–Ω–∞', '–ï–≥–æ—Ä–æ–≤–Ω–∞', '–ò–≤–∞–Ω–æ–≤–Ω–∞',
    '–ò–≥–æ—Ä–µ–≤–Ω–∞', '–ò–ª—å–∏–Ω–∏—á–Ω–∞', '–ö–∏—Ä–∏–ª–ª–æ–≤–Ω–∞', '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–Ω–∞', '–õ—å–≤–æ–≤–Ω–∞', '–õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞',
    '–ú–∞–∫—Å–∏–º–æ–≤–Ω–∞', '–ú–∞—Ä–∫–æ–≤–Ω–∞', '–ú–∞—Ç–≤–µ–µ–≤–Ω–∞', '–ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞', '–ù–∏–∫–∏—Ç–∏—á–Ω–∞', '–ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞',
    '–û–ª–µ–≥–æ–≤–Ω–∞', '–ü–∞–≤–ª–æ–≤–Ω–∞', '–ü–µ—Ç—Ä–æ–≤–Ω–∞', '–†–æ–º–∞–Ω–æ–≤–Ω–∞', '–†—É—Å–ª–∞–Ω–æ–≤–Ω–∞', '–°–µ—Ä–≥–µ–µ–≤–Ω–∞',
    '–°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–Ω–∞', '–°—Ç–µ–ø–∞–Ω–æ–≤–Ω–∞', '–¢–∏–º–æ—Ñ–µ–µ–≤–Ω–∞', '–§–µ–¥–æ—Ä–æ–≤–Ω–∞', '–Æ—Ä—å–µ–≤–Ω–∞', '–Ø—Ä–æ—Å–ª–∞–≤–æ–≤–Ω–∞'
]

def generate_birth_date():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Å 1960 –ø–æ 2010 –≥–æ–¥"""
    start_date = date(1960, 1, 1)
    end_date = date(2010, 12, 31)
    return fake.date_between(start_date=start_date, end_date=end_date)

def generate_move_date():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è —Å 2020 –≥–æ–¥–∞ –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É"""
    start_date = datetime(2020, 1, 1)
    end_date = datetime.now()
    return fake.date_time_between(start_date=start_date, end_date=end_date)

def generate_owner_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ –§–ò–û –ø–æ –ø–æ–ª—É"""
    is_male = random.choice([True, False])
    
    if is_male:
        first_name = random.choice(male_first_names)
        last_name = random.choice(male_last_names)
        middle_name = random.choice(male_middle_names)
    else:
        first_name = random.choice(female_first_names)
        last_name = random.choice(female_last_names)
        middle_name = random.choice(female_middle_names)
    
    # 30% —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –æ—Ç—á–µ—Å—Ç–≤–∞
    if random.random() < 0.3:
        middle_name = None
    
    return {
        'first_name': first_name,
        'last_name': last_name,
        'middle_name': middle_name,
        'birth_date': generate_birth_date()
    }

def seed_database():
    db = SessionLocal()
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–æ–ª–Ω–∏—Ç—å)
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        db.query(models.Move).delete()
        db.query(models.Wing).delete()
        db.query(models.Place).delete()
        db.query(models.Type).delete()
        db.query(models.Owner).delete()
        db.commit()
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        db.rollback()
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤...")
    owners = []
    for i in range(150):
        owner_data = generate_owner_data()
        owner = models.Owner(
            email=fake.unique.email(),
            first_name=owner_data['first_name'],
            last_name=owner_data['last_name'],
            middle_name=owner_data['middle_name'],
            birth_date=owner_data['birth_date']
        )
        owners.append(owner)
        db.add(owner)
    db.commit()
    print("‚úÖ –í–ª–∞–¥–µ–ª—å—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤
    print("üè∑Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤...")
    type_names = [
        "–ö–∞—Ä—Ç–∏–Ω–∞", "–°–∫—É–ª—å–ø—Ç—É—Ä–∞", "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç", "–†—É–∫–æ–ø–∏—Å—å", "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è", "–û—Ä—É–∂–∏–µ", "–ú–µ–±–µ–ª—å", "–Æ–≤–µ–ª–∏—Ä–Ω–æ–µ –∏–∑–¥–µ–ª–∏–µ", "–ö–µ—Ä–∞–º–∏–∫–∞",
        "–¢–µ–∫—Å—Ç–∏–ª—å", "–ú–æ–Ω–µ—Ç–∞", "–ö–Ω–∏–≥–∞", "–ü—Ä–∏–±–æ—Ä", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
    ]

    types = []
    for name in type_names:
        type_obj = models.Type(name=name)
        types.append(type_obj)
        db.add(type_obj)
    db.commit()
    print("‚úÖ –¢–∏–ø—ã —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–æ–∫
    print("üèõÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Å—Ç –≤—ã—Å—Ç–∞–≤–æ–∫...")
    places = []
    russian_cities = [
        "–ú–æ—Å–∫–≤–∞", "–ö—É—Ä—Å–∫", "–û–±–æ—è–Ω—å", "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥", "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
        "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ê–Ω–∞–ø–∞", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–û–º—Å–∫", "–Ø–ª—Ç–∞",
        "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–í–æ—Ä–æ–Ω–µ–∂", "–ü–µ—Ä–º—å", "–í–æ–ª–≥–æ–≥—Ä–∞–¥"
    ] * 3
    
    for city in russian_cities[:50]:
        place = models.Place(
            location=f"{city}, {fake.street_address()}",
            scale=round(random.uniform(0.5, 2.0), 2)
        )
        places.append(place)
        db.add(place)
    db.commit()
    print("‚úÖ –ú–µ—Å—Ç–∞ –≤—ã—Å—Ç–∞–≤–æ–∫ —Å–æ–∑–¥–∞–Ω—ã")
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤
    print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤ (40-60 –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞)...")
    wings = []
    total_wings = 0
    for owner in owners:
        wings_count = random.randint(40, 60)
        total_wings += wings_count
        for _ in range(wings_count):
            wing = models.Wing(
                owner_id=owner.id,
                type_id=random.choice(types).id,
                profit=round(random.uniform(0.1, 3.0), 2),
                name=fake.catch_phrase()
            )
            wings.append(wing)
            db.add(wing)
    db.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_wings} —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤")
    
    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–π
    print("üöö –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–π (10-50 –Ω–∞ —ç–∫—Å–ø–æ–Ω–∞—Ç)...")
    current_date = datetime.now()
    total_moves = 0
    
    for wing in wings:
        moves_count = random.randint(10, 50)
        total_moves += moves_count
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—ã –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–π —Å 2020 –≥–æ–¥–∞ –ø–æ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        move_dates = sorted([generate_move_date() for _ in range(moves_count)])
        
        for move_date in move_dates:
            move = models.Move(
                wing_id=wing.id,
                place_id=random.choice(places).id,
                price=round(random.uniform(1000, 50000), 2),
                dt=move_date
            )
            db.add(move)
    
    db.commit()
    db.close()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total_moves} –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–π")
    print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    
    
    
  