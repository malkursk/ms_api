from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List, Dict, Any
import crud, schemas
from database import get_db, get_sql_queries
import models

router = APIRouter()

def create_response_with_sql(data: Any) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    sql_queries = get_sql_queries()
    
    response_data = {
        "data": data,
        "sql": [
            {
                'query': query['statement'].strip(),
                'parameters': str(query['parameters']),
                'executemany': query['executemany']
            } for query in sql_queries
        ]
    }
    return response_data

# ==================== –í–õ–ê–î–ï–õ–¨–¶–´ (OWNERS) ====================
@router.get("/owners/", tags=["üë• –í–ª–∞–¥–µ–ª—å—Ü—ã"])
def read_owners(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"""
    owners = crud.get_owners(db, skip=skip, limit=limit)
    return create_response_with_sql(owners)

@router.get("/owners/{owner_id}", tags=["üë• –í–ª–∞–¥–µ–ª—å—Ü—ã"])
def read_owner(owner_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ –ø–æ ID"""
    db_owner = crud.get_owner(db, owner_id=owner_id)
    if db_owner is None:
        raise HTTPException(status_code=404, detail="–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return create_response_with_sql(db_owner)

@router.get("/owners/{email}/wings", tags=["üë• –í–ª–∞–¥–µ–ª—å—Ü—ã"])
def get_owner_wings_by_email(email: str, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ email"""
    owner = crud.get_owner_by_email(db, email)
    if not owner:
        raise HTTPException(status_code=404, detail="–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    wings = crud.get_wings_by_owner_with_details(db, owner.id)
    return create_response_with_sql(wings)

# ==================== –≠–ö–°–ü–û–ù–ê–¢–´ (WINGS) ====================
@router.get("/wings/", tags=["üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã"])
def read_wings(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"""
    wings = db.query(models.Wing).offset(skip).limit(limit).all()
    return create_response_with_sql(wings)

@router.get("/wings/{wing_id}", tags=["üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã"])
def read_wing(wing_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–µ –ø–æ ID"""
    wing = crud.get_wing(db, wing_id=wing_id)
    if not wing:
        raise HTTPException(status_code=404, detail="–≠–∫—Å–ø–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return create_response_with_sql(wing)

@router.put("/wings/{wing_id}", tags=["üñºÔ∏è –≠–∫—Å–ø–æ–Ω–∞—Ç—ã"])
def update_wing(wing_id: int, wing_update: schemas.WingCreate, db: Session = Depends(get_db)):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ–Ω–∞—Ç–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞
    existing_wing = crud.get_wing(db, wing_id=wing_id)
    if not existing_wing:
        raise HTTPException(status_code=404, detail="–≠–∫—Å–ø–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    owner = crud.get_owner(db, owner_id=wing_update.owner_id)
    if not owner:
        raise HTTPException(status_code=404, detail="–í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
    wing_type = db.query(models.Type).filter(models.Type.id == wing_update.type_id).first()
    if not wing_type:
        raise HTTPException(status_code=404, detail="–¢–∏–ø —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —ç–∫—Å–ø–æ–Ω–∞—Ç
    updated_wing = crud.update_wing(db, wing_id=wing_id, wing_update=wing_update)
    return create_response_with_sql(updated_wing)

# ==================== –ü–ï–†–ï–ú–ï–©–ï–ù–ò–Ø (MOVES) ====================
@router.get("/moves/", tags=["üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"])
def read_moves(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"""
    moves = db.query(models.Move).offset(skip).limit(limit).all()
    return create_response_with_sql(moves)

@router.post("/moves/", tags=["üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"])
def create_move(move: schemas.MoveCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞
    wing = crud.get_wing(db, wing_id=move.wing_id)
    if not wing:
        raise HTTPException(status_code=404, detail="–≠–∫—Å–ø–æ–Ω–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    place = db.query(models.Place).filter(models.Place.id == move.place_id).first()
    if not place:
        raise HTTPException(status_code=404, detail="–ú–µ—Å—Ç–æ –≤—ã—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    new_move = crud.create_move(db, move=move)
    return create_response_with_sql(new_move)

@router.delete("/moves/{move_id}", tags=["üöö –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"])
def delete_move(move_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ ID"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    existing_move = db.query(models.Move).filter(models.Move.id == move_id).first()
    if not existing_move:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    result = crud.delete_move(db, move_id=move_id)
    return create_response_with_sql({"message": "–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", "deleted_id": move_id})

# ==================== –ú–ï–°–¢–ê –í–´–°–¢–ê–í–û–ö (PLACES) ====================
@router.get("/places/", tags=["üèõÔ∏è –ú–µ—Å—Ç–∞ –≤—ã—Å—Ç–∞–≤–æ–∫"])
def read_places(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Å—Ç –≤—ã—Å—Ç–∞–≤–æ–∫"""
    places = db.query(models.Place).all()
    return create_response_with_sql(places)

@router.get("/places/{place_id}", tags=["üèõÔ∏è –ú–µ—Å—Ç–∞ –≤—ã—Å—Ç–∞–≤–æ–∫"])
def read_place(place_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ –≤—ã—Å—Ç–∞–≤–∫–∏ –ø–æ ID"""
    place = db.query(models.Place).filter(models.Place.id == place_id).first()
    if not place:
        raise HTTPException(status_code=404, detail="–ú–µ—Å—Ç–æ –≤—ã—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return create_response_with_sql(place)

# ==================== –¢–ò–ü–´ –≠–ö–°–ü–û–ù–ê–¢–û–í (TYPES) ====================
@router.get("/types/", tags=["üè∑Ô∏è –¢–∏–ø—ã —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"])
def read_types(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"""
    types = db.query(models.Type).all()
    return create_response_with_sql(types)

@router.get("/types/{type_id}", tags=["üè∑Ô∏è –¢–∏–ø—ã —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"])
def read_type(type_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∏–ø–µ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –ø–æ ID"""
    wing_type = db.query(models.Type).filter(models.Type.id == type_id).first()
    if not wing_type:
        raise HTTPException(status_code=404, detail="–¢–∏–ø —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return create_response_with_sql(wing_type)

# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê (ANALYTICS) ====================
@router.get("/analytics/owner-most-wings", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_owner_with_most_wings(db: Session = Depends(get_db)):
    """–í–ª–∞–¥–µ–ª–µ—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç–∫—Å–ø–æ–Ω–∞—Ç–æ–≤"""
    result = crud.get_owner_with_most_wings(db)
    return create_response_with_sql(result)

@router.get("/analytics/most-expensive-wing", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_most_expensive_wing_move(db: Session = Depends(get_db)):
    """–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —ç–∫—Å–ø–æ–Ω–∞—Ç –≤ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏"""
    move = crud.get_most_expensive_wing_move(db)
    if not move:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    result = {
        "wing_id": move.wing_id,
        "wing_name": move.wing.name,
        "price": move.price,
        "date": move.dt.isoformat() if move.dt else None
    }
    return create_response_with_sql(result)

@router.get("/analytics/most-profitable-wing", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_most_profitable_wing(db: Session = Depends(get_db)):
    """–°–∞–º—ã–π –ø—Ä–∏–±—ã–ª—å–Ω—ã–π —ç–∫—Å–ø–æ–Ω–∞—Ç"""
    result = crud.get_most_profitable_wing(db)
    if not result:
        raise HTTPException(status_code=404, detail="–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return create_response_with_sql(result)

@router.get("/analytics/most-profitable-place", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_most_profitable_place(db: Session = Depends(get_db)):
    """–°–∞–º–æ–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –≤—ã—Å—Ç–∞–≤–∫–∏"""
    result = crud.get_most_profitable_place(db)
    if not result:
        raise HTTPException(status_code=404, detail="–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return create_response_with_sql(result)

@router.get("/analytics/most-popular-type", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_most_popular_type(db: Session = Depends(get_db)):
    """–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ–Ω–∞—Ç–∞"""
    result = crud.get_most_popular_type(db)
    return create_response_with_sql(result)

@router.get("/analytics/wing-move-frequency/{wing_id}", tags=["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
def get_wing_move_frequency(wing_id: int, db: Session = Depends(get_db)):
    """–ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞"""
    result = crud.get_wing_move_frequency(db, wing_id)
    if not result:
        raise HTTPException(status_code=404, detail="–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫—Å–ø–æ–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return create_response_with_sql(result)